/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  OAuth as PrismaOAuth,
  User as PrismaUser,
} from "@prisma/client";

export class OAuthServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.OAuthCountArgs, "select">): Promise<number> {
    return this.prisma.oAuth.count(args);
  }

  async oAuths<T extends Prisma.OAuthFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.OAuthFindManyArgs>
  ): Promise<PrismaOAuth[]> {
    return this.prisma.oAuth.findMany<Prisma.OAuthFindManyArgs>(args);
  }
  async oAuth<T extends Prisma.OAuthFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.OAuthFindUniqueArgs>
  ): Promise<PrismaOAuth | null> {
    return this.prisma.oAuth.findUnique(args);
  }
  async createOAuth<T extends Prisma.OAuthCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OAuthCreateArgs>
  ): Promise<PrismaOAuth> {
    return this.prisma.oAuth.create<T>(args);
  }
  async updateOAuth<T extends Prisma.OAuthUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OAuthUpdateArgs>
  ): Promise<PrismaOAuth> {
    return this.prisma.oAuth.update<T>(args);
  }
  async deleteOAuth<T extends Prisma.OAuthDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.OAuthDeleteArgs>
  ): Promise<PrismaOAuth> {
    return this.prisma.oAuth.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.oAuth
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
