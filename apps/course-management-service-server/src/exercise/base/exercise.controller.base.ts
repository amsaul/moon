/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ExerciseService } from "../exercise.service";
import { ExerciseCreateInput } from "./ExerciseCreateInput";
import { Exercise } from "./Exercise";
import { ExerciseFindManyArgs } from "./ExerciseFindManyArgs";
import { ExerciseWhereUniqueInput } from "./ExerciseWhereUniqueInput";
import { ExerciseUpdateInput } from "./ExerciseUpdateInput";

export class ExerciseControllerBase {
  constructor(protected readonly service: ExerciseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Exercise })
  async createExercise(
    @common.Body() data: ExerciseCreateInput
  ): Promise<Exercise> {
    return await this.service.createExercise({
      data: data,
      select: {
        codeTemplate: true,
        createdAt: true,
        exerciseCodeTemplate: true,
        exerciseInstructions: true,
        exerciseTestCases: true,
        id: true,
        instructions: true,
        relatedLesson: true,
        testCases: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Exercise] })
  @ApiNestedQuery(ExerciseFindManyArgs)
  async exercises(@common.Req() request: Request): Promise<Exercise[]> {
    const args = plainToClass(ExerciseFindManyArgs, request.query);
    return this.service.exercises({
      ...args,
      select: {
        codeTemplate: true,
        createdAt: true,
        exerciseCodeTemplate: true,
        exerciseInstructions: true,
        exerciseTestCases: true,
        id: true,
        instructions: true,
        relatedLesson: true,
        testCases: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Exercise })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async exercise(
    @common.Param() params: ExerciseWhereUniqueInput
  ): Promise<Exercise | null> {
    const result = await this.service.exercise({
      where: params,
      select: {
        codeTemplate: true,
        createdAt: true,
        exerciseCodeTemplate: true,
        exerciseInstructions: true,
        exerciseTestCases: true,
        id: true,
        instructions: true,
        relatedLesson: true,
        testCases: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Exercise })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateExercise(
    @common.Param() params: ExerciseWhereUniqueInput,
    @common.Body() data: ExerciseUpdateInput
  ): Promise<Exercise | null> {
    try {
      return await this.service.updateExercise({
        where: params,
        data: data,
        select: {
          codeTemplate: true,
          createdAt: true,
          exerciseCodeTemplate: true,
          exerciseInstructions: true,
          exerciseTestCases: true,
          id: true,
          instructions: true,
          relatedLesson: true,
          testCases: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Exercise })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteExercise(
    @common.Param() params: ExerciseWhereUniqueInput
  ): Promise<Exercise | null> {
    try {
      return await this.service.deleteExercise({
        where: params,
        select: {
          codeTemplate: true,
          createdAt: true,
          exerciseCodeTemplate: true,
          exerciseInstructions: true,
          exerciseTestCases: true,
          id: true,
          instructions: true,
          relatedLesson: true,
          testCases: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
